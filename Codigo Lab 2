public class Voto{
    private int id;
    private int votanteId;
    private int candidatoId;
    private String timestamp;
    
    public Voto(int id, int votanteId, int  candidatoId, String timestamp){
        this.id = id;
        this.votanteId = votanteId;
        this.candidatoId = candidatoId;
        this.timestamp = timestamp;
    }
    
    public int getId(){
        return id;
    }
    public int getVotanteId(){
        return votanteId;
    }
    public int getCandidatoId(){
        return candidatoId;
    }
    public String getTimestamp(){
        return timestamp;
    }
    public void setId(int id){
        this.id = id;
    }
    public void setVotanteId(int votanteId){
        this.votanteId = votanteId;
    }
    public void setCandidatoId(int candidatoId){
        this.candidatoId = candidatoId;
    }
    public void setTimestamp(String timestamp){
        this.timestamp = timestamp;
    }
}

public class Candidato{
    private int id;
    private String nombre;
    private String partido;
    private Queue <Voto> votosRecibidos;
    
    public Candidato(int id, String nombre, String partido){
        this.id = id;
        this.nombre = nombre;
        this.partido = partido;
        this.votosRecibidos = new LinkedList<>();
    }
    
    public int getId(){
        return id;
    }
    
    public String getNombre(){
        return nombre;
    }
    
    public String getPartido(){
        return partido;
    }
    
    public Queue<Voto> getVotosRecibidos(){
        return votosRecibidos;
    }
    
    public Void agregarVoto(Voto v){
        votosRecibidos.add(v);
    }
}

public class Votante{
    private int id;
    private String nombre;
    private boolean yaVoto;

    public Votante(int id, String nombre, boolean yaVoto){
        this.id = id;
        this.nombre = nombre;
        this.yaVoto = yaVoto;
    }

    public int getId(){
        return id;
    }

    public String getNombre(){
        return nombre;
    }

    public boolean getYaVoto(){
        return yaVoto;
    }

    public void marcarComoVotado(){
        yaVoto = true;
    }
}

public class UrnaElectoral{
    private LinkedList <Candidato> listaCandidatos;
    private Stack <Voto> historialVotos;
    private Queue <Voto> votosReportados;
    private int idCounter = 0;

    public UrnaElectoral(){
        this.listaCandidatos = new LinkedList<>();
        this.historialVotos = new Stack<>();
        this.votosReportados = new LinkedList<>();
    }

    public boolean verificarVotante(Votante votante){
        return votante.getYaVoto();
    }

    public boolean registrarVoto(Votante votante, int candidatoId){
        if (!verificarVotante(votante)){
            for (Candidato c : listaCandidatos){
                if (c.getId() == candidatoId){
                    SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
                    String timeStamp = sdf.format(new Date());
                    Voto registrarVoto = new Voto(idCounter++, votante.getId(), candidatoId, timeStamp);
                    c.agregarVoto(registrarVoto);
                    historialVotos.push(registrarVoto);
                    votante.marcarComoVotado();
                    return true;
                }
            }
        }
    return false;
   }

    public boolean reportarVoto(int candidatoId, int votoId){
        for (Candidato c : listaCandidatos){
            if (c.getId() == candidatoId){
                Queue<Voto> votos = c.getVotosRecibidos();
                for (Voto v : votos){
                    if (v.getId() == votoId){
                        votos.remove(v);
                        votosReportados.add(v);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public Map<Integer, Integer> obtenerResultados(){
        Map<Integer, Integer> resultados = new HashMap<>();
        for (Candidato c : listaCandidatos){
            resultados.put(c.getId(), c.getVotosRecibidos().size());
        }
        return resultados;
    }
}
